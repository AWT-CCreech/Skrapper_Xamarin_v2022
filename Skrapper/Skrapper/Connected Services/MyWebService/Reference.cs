//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyWebService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://10.0.0.33/ScanTestService/", ConfigurationName="MyWebService.ScannerWebServiceSoap")]
    public interface ScannerWebServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GenericQueryToList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenericQueryToList(string Query, string delimiter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GenericQueryToList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GenericQueryToListAsync(string Query, string delimiter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/DateDaysDiff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long DateDaysDiff(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/DateDaysDiff", ReplyAction="*")]
        System.Threading.Tasks.Task<long> DateDaysDiffAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/CurrentTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.DateTime CurrentTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/CurrentTime", ReplyAction="*")]
        System.Threading.Tasks.Task<System.DateTime> CurrentTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetServerMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetServerMode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetServerMode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetServerModeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetServerURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetServerURL();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetServerURL", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetServerURLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/UserGetNameFromID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UserGetNameFromID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/UserGetNameFromID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UserGetNameFromIDAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/UserGetIDFromName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UserGetIDFromName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/UserGetIDFromName", ReplyAction="*")]
        System.Threading.Tasks.Task<int> UserGetIDFromNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/UsersGetList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UsersGetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/UsersGetList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UsersGetListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetCustomPartListNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCustomPartListNames(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetCustomPartListNames", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCustomPartListNamesAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetCustomPartList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCustomPartList(string UserName, string PartListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetCustomPartList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCustomPartListAsync(string UserName, string PartListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddCustomPartList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddCustomPartList(string UserName, string PartListName, string PartList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddCustomPartList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddCustomPartListAsync(string UserName, string PartListName, string PartList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/DeleteCustomPartList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteCustomPartList(string UserName, string PartListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/DeleteCustomPartList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteCustomPartListAsync(string UserName, string PartListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetOneFieldDataFromTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOneFieldDataFromTable(string TableName, string WhatField, string Condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetOneFieldDataFromTable", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOneFieldDataFromTableAsync(string TableName, string WhatField, string Condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddTestLabScan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddTestLabScan(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string Status, string TestResult, string ResultNotes, string HECI, int scanHistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddTestLabScan", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddTestLabScanAsync(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string Status, string TestResult, string ResultNotes, string HECI, int scanHistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddTestablePart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddTestablePart(string PartNo, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddTestablePart", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddTestablePartAsync(string PartNo, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestPartInfoByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTestPartInfoByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestPartInfoByID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestPartInfoByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestPartInfoByPartNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTestPartInfoByPartNo(string partNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestPartInfoByPartNo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestPartInfoByPartNoAsync(string partNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestPartInfoBySn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetTestPartInfoBySn(string SerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestPartInfoBySn", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestPartInfoBySnAsync(string SerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetPartNumberBySn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPartNumberBySn(string SerialNum, string whatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetPartNumberBySn", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPartNumberBySnAsync(string SerialNum, string whatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/CheckIfTested", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckIfTested(string SerialNum, string PartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/CheckIfTested", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckIfTestedAsync(string SerialNum, string PartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestLabPartExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TestLabPartExists(string PartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestLabPartExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TestLabPartExistsAsync(string PartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestResultBySn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTestResultBySn(string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestResultBySn", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTestResultBySnAsync(string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestFieldDataBySerialNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTestFieldDataBySerialNo(string SerialNumber, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestFieldDataBySerialNo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTestFieldDataBySerialNoAsync(string SerialNumber, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestResultNotesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTestResultNotesByID(int rID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetTestResultNotesByID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetTestResultNotesByIDAsync(int rID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestPoGetOpenList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestPoGetOpenList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestPoGetOpenList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestPoGetOpenListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestRmaGetOpenList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestRmaGetOpenList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestRmaGetOpenList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestRmaGetOpenListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_POSkidNewNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_POSkidNewNumber(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_POSkidNewNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_POSkidNewNumberAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_POSkidGetFieldData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_POSkidGetFieldData(string SkidNo, string FieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_POSkidGetFieldData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_POSkidGetFieldDataAsync(string SkidNo, string FieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_POSkidUpdateField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Skp_POSkidUpdateField(string SkidNo, string FieldName, string FieldData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_POSkidUpdateField", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> Skp_POSkidUpdateFieldAsync(string SkidNo, string FieldName, string FieldData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_PrintSkidSheet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Skp_PrintSkidSheet(string SkidNo, string OtherData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_PrintSkidSheet", ReplyAction="*")]
        System.Threading.Tasks.Task Skp_PrintSkidSheetAsync(string SkidNo, string OtherData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_BuildPartStatusView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_BuildPartStatusView(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_BuildPartStatusView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_BuildPartStatusViewAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_PartStatusInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_PartStatusInfo(string UserName, string partNo, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_PartStatusInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_PartStatusInfoAsync(string UserName, string partNo, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidCheckDupeSN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidCheckDupeSN(string SkidNo, string SerialNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidCheckDupeSN", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidCheckDupeSNAsync(string SkidNo, string SerialNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidNewNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidNewNumber(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidNewNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidNewNumberAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_PartApproved", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Skp_PartApproved(string PartNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_PartApproved", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> Skp_PartApprovedAsync(string PartNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_CanProcessPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Skp_CanProcessPart(string PartNo, int Qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_CanProcessPart", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> Skp_CanProcessPartAsync(string PartNo, int Qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Skp_SkidItemAdd(int ParentID, int isContainer, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemAdd", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Skp_SkidItemAddAsync(int ParentID, int isContainer, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemRemove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Skp_SkidItemRemove(int ParentID, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemRemove", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Skp_SkidItemRemoveAsync(int ParentID, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidDeleteItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Skp_SkidDeleteItem(int skidRowID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidDeleteItem", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Skp_SkidDeleteItemAsync(int skidRowID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Skp_SkidItemCount(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Skp_SkidItemCountAsync(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemQty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Skp_SkidItemQty(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidItemQty", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Skp_SkidItemQtyAsync(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidSetAsComplete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidSetAsComplete(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidSetAsComplete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidSetAsCompleteAsync(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidSetAsShipped", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidSetAsShipped(string SkidNo, string UserName, string VendorName, string SalesOrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidSetAsShipped", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidSetAsShippedAsync(string SkidNo, string UserName, string VendorName, string SalesOrderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidListGetAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidListGetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidListGetAll", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidListGetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidListGetAfterDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidListGetAfterDate(System.DateTime TheCutOffDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidListGetAfterDate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidListGetAfterDateAsync(System.DateTime TheCutOffDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetSkidTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidGetSkidTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetSkidTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidGetSkidTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetMetalPartTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidGetMetalPartTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetMetalPartTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidGetMetalPartTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetCarrierList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidGetCarrierList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetCarrierList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidGetCarrierListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetLocationList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidGetLocationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetLocationList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidGetLocationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetPartNumbers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidGetPartNumbers(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetPartNumbers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidGetPartNumbersAsync(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_GetSkidNoBySerialNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_GetSkidNoBySerialNumber(string SerialNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_GetSkidNoBySerialNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_GetSkidNoBySerialNumberAsync(string SerialNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Skp_SkidGetInfo(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> Skp_SkidGetInfoAsync(string SkidNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetFieldData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Skp_SkidGetFieldData(string SkidNo, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidGetFieldData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Skp_SkidGetFieldDataAsync(string SkidNo, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidUpdateField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Skp_SkidUpdateField(string SkidNo, string FieldName, string FieldData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidUpdateField", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> Skp_SkidUpdateFieldAsync(string SkidNo, string FieldName, string FieldData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidUpdateNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Skp_SkidUpdateNote(string UserName, string TableRef, string RecordRefID, string noteStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/Skp_SkidUpdateNote", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> Skp_SkidUpdateNoteAsync(string UserName, string TableRef, string RecordRefID, string noteStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetOpenList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SoGetOpenList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetOpenList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SoGetOpenListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SoGetInfo(string SoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SoGetInfoAsync(string SoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetItemNumbers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SoGetItemNumbers(string SoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetItemNumbers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SoGetItemNumbersAsync(string SoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetInfoByPartNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SoGetInfoByPartNum(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetInfoByPartNum", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SoGetInfoByPartNumAsync(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetItemDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SoGetItemDescription(string OrderNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoGetItemDescription", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SoGetItemDescriptionAsync(string OrderNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoExcludingPartIsSoComplete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SoExcludingPartIsSoComplete(string SoNum, string ItemNum, string curPoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SoExcludingPartIsSoComplete", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SoExcludingPartIsSoCompleteAsync(string SoNum, string ItemNum, string curPoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetOpenList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RtvGetOpenList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetOpenList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RtvGetOpenListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet RtvGetInfo(string RtvID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> RtvGetInfoAsync(string RtvID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetItemNumbers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RtvGetItemNumbers(string RtvID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetItemNumbers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RtvGetItemNumbersAsync(string RtvID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetInfoByPartNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet RtvGetInfoByPartNum(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RtvGetInfoByPartNum", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> RtvGetInfoByPartNumAsync(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetOpenList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PoGetOpenList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetOpenList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PoGetOpenListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet PoGetInfo(string PoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> PoGetInfoAsync(string PoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetItemNumbers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PoGetItemNumbers(string PoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetItemNumbers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PoGetItemNumbersAsync(string PoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetAllItemNumbers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PoGetAllItemNumbers(string PoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetAllItemNumbers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PoGetAllItemNumbersAsync(string PoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetInfoByPartNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet PoGetInfoByPartNum(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetInfoByPartNum", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> PoGetInfoByPartNumAsync(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetItemDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PoGetItemDescription(string OrderNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/PoGetItemDescription", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PoGetItemDescriptionAsync(string OrderNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/OpenSoReportBuildEmailString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string OpenSoReportBuildEmailString(string EmailStr, string PoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/OpenSoReportBuildEmailString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> OpenSoReportBuildEmailStringAsync(string EmailStr, string PoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetOpenList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RmaGetOpenList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetOpenList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RmaGetOpenListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet RmaGetInfo(string RmaNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> RmaGetInfoAsync(string RmaNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetItemNumbers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RmaGetItemNumbers(string RmaNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetItemNumbers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RmaGetItemNumbersAsync(string RmaNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetInfoByPartNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet RmaGetInfoByPartNum(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetInfoByPartNum", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> RmaGetInfoByPartNumAsync(string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaHistorySearch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RmaHistorySearch(string sSerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaHistorySearch", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RmaHistorySearchAsync(string sSerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaSearchUnapproved", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RmaSearchUnapproved(string sSerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaSearchUnapproved", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RmaSearchUnapprovedAsync(string sSerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetReturnInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RmaGetReturnInfo(string sScanUser, string RmaNum, string ItemNum, string sSerialNum, string HeciCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/RmaGetReturnInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RmaGetReturnInfoAsync(string sScanUser, string RmaNum, string ItemNum, string sSerialNum, string HeciCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/VerifySerialNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string VerifySerialNumber(string SerialNum, string Direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/VerifySerialNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> VerifySerialNumberAsync(string SerialNum, string Direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/VerifySerialNumber_V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string VerifySerialNumber_V2(string SerialNum, string OrderType, string OrderNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/VerifySerialNumber_V2", ReplyAction="*")]
        System.Threading.Tasks.Task<string> VerifySerialNumber_V2Async(string SerialNum, string OrderType, string OrderNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetPartInfoBySerialNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetPartInfoBySerialNumber(string SerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetPartInfoBySerialNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPartInfoBySerialNumberAsync(string SerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetScanHistoryFieldData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetScanHistoryFieldData(string SerialNo, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetScanHistoryFieldData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetScanHistoryFieldDataAsync(string SerialNo, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/CompleteOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CompleteOrder(string OrderType, string OrderNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/CompleteOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CompleteOrderAsync(string OrderType, string OrderNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddNewPartScan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddNewPartScan(string DeviceID, string PartNum, string SerialNumbers, string UserName, string SONum, string PONum, string RmaNo, string HECI, string MNSCompany);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddNewPartScan", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddNewPartScanAsync(string DeviceID, string PartNum, string SerialNumbers, string UserName, string SONum, string PONum, string RmaNo, string HECI, string MNSCompany);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddNewPartScan_V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddNewPartScan_V2(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string HECI, string MNSCompany);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddNewPartScan_V2", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddNewPartScan_V2Async(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string HECI, string MNSCompany);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddDirtDevilAdjustment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddDirtDevilAdjustment(string DeviceID, string OrderType, string OrderNum, string ItemNum, string QtyAdjust, string adjReasonOverRide, string ScanUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AddDirtDevilAdjustment", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddDirtDevilAdjustmentAsync(string DeviceID, string OrderType, string OrderNum, string ItemNum, string QtyAdjust, string adjReasonOverRide, string ScanUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/DeletePartScan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeletePartScan(string PartScanID, string DdAdjustmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/DeletePartScan", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeletePartScanAsync(string PartScanID, string DdAdjustmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ExecProcedure", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ExecProcedure(string sSp, string returnDefaultValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ExecProcedure", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ExecProcedureAsync(string sSp, string returnDefaultValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetAltPartNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAltPartNumber(string PartNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetAltPartNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAltPartNumberAsync(string PartNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestFindSoNumBySerialNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestFindSoNumBySerialNum(string RmaNum, string ItemNum, string SerialNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/TestFindSoNumBySerialNum", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestFindSoNumBySerialNumAsync(string RmaNum, string ItemNum, string SerialNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/FindSoNumFromPartSerialNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MyWebService.FindSoNumFromPartSerialNumResponse FindSoNumFromPartSerialNum(MyWebService.FindSoNumFromPartSerialNumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/FindSoNumFromPartSerialNum", ReplyAction="*")]
        System.Threading.Tasks.Task<MyWebService.FindSoNumFromPartSerialNumResponse> FindSoNumFromPartSerialNumAsync(MyWebService.FindSoNumFromPartSerialNumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/FindMatchingSoSerialNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        MyWebService.FindMatchingSoSerialNumResponse FindMatchingSoSerialNum(MyWebService.FindMatchingSoSerialNumRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/FindMatchingSoSerialNum", ReplyAction="*")]
        System.Threading.Tasks.Task<MyWebService.FindMatchingSoSerialNumResponse> FindMatchingSoSerialNumAsync(MyWebService.FindMatchingSoSerialNumRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/FindSalesOrderNumbersForRmaItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FindSalesOrderNumbersForRmaItem(string RmaNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/FindSalesOrderNumbersForRmaItem", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> FindSalesOrderNumbersForRmaItemAsync(string RmaNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetEventInfoBySoNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetEventInfoBySoNumber(string SoNum, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetEventInfoBySoNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEventInfoBySoNumberAsync(string SoNum, string WhatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AnyOrderWithPartNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet AnyOrderWithPartNumber(string PartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/AnyOrderWithPartNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> AnyOrderWithPartNumberAsync(string PartNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ScanTestCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int ScanTestCount(string OrderType, string OrderNo, string PartNo, string Status, string TestResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ScanTestCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ScanTestCountAsync(string OrderType, string OrderNo, string PartNo, string Status, string TestResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ScannedTodayCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int ScannedTodayCount(string PartNum, string OrderType, string OrderNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ScannedTodayCount", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ScannedTodayCountAsync(string PartNum, string OrderType, string OrderNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetLeftToShip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetLeftToShip(string SoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetLeftToShip", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetLeftToShipAsync(string SoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetQtyOrdered", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetQtyOrdered(string OrderType, string OrderNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetQtyOrdered", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetQtyOrderedAsync(string OrderType, string OrderNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetQtyReceived", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetQtyReceived(string PoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetQtyReceived", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetQtyReceivedAsync(string PoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ToShipOrStock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ToShipOrStock(string PoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/ToShipOrStock", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ToShipOrStockAsync(string PoNum, string ItemNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetWarrantyInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWarrantyInfo(string SerialNum, string whatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/GetWarrantyInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWarrantyInfoAsync(string SerialNum, string whatField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/IsUnderWarranty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsUnderWarranty(string SerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/IsUnderWarranty", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsUnderWarrantyAsync(string SerialNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SendDupeSnPoEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendDupeSnPoEmail(string PartNum, string SerialNum, string HeciCode, string UserName, string OrderNum, string DupePoNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://10.0.0.33/ScanTestService/SendDupeSnPoEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendDupeSnPoEmailAsync(string PartNum, string SerialNum, string HeciCode, string UserName, string OrderNum, string DupePoNum);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindSoNumFromPartSerialNum", WrapperNamespace="http://10.0.0.33/ScanTestService/", IsWrapped=true)]
    public partial class FindSoNumFromPartSerialNumRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=0)]
        public string RmaNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=1)]
        public string ItemNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=2)]
        public string SerialNo;
        
        public FindSoNumFromPartSerialNumRequest()
        {
        }
        
        public FindSoNumFromPartSerialNumRequest(string RmaNum, string ItemNum, string SerialNo)
        {
            this.RmaNum = RmaNum;
            this.ItemNum = ItemNum;
            this.SerialNo = SerialNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindSoNumFromPartSerialNumResponse", WrapperNamespace="http://10.0.0.33/ScanTestService/", IsWrapped=true)]
    public partial class FindSoNumFromPartSerialNumResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=0)]
        public bool FindSoNumFromPartSerialNumResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=1)]
        public string SoNumOut;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=2)]
        public string InvDateOut;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=3)]
        public bool UnderWarranty;
        
        public FindSoNumFromPartSerialNumResponse()
        {
        }
        
        public FindSoNumFromPartSerialNumResponse(bool FindSoNumFromPartSerialNumResult, string SoNumOut, string InvDateOut, bool UnderWarranty)
        {
            this.FindSoNumFromPartSerialNumResult = FindSoNumFromPartSerialNumResult;
            this.SoNumOut = SoNumOut;
            this.InvDateOut = InvDateOut;
            this.UnderWarranty = UnderWarranty;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindMatchingSoSerialNum", WrapperNamespace="http://10.0.0.33/ScanTestService/", IsWrapped=true)]
    public partial class FindMatchingSoSerialNumRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=0)]
        public string RmaNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=1)]
        public string ItemNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=2)]
        public string SerialNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=3)]
        public bool SNMustMatch;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=4)]
        public int iMonthsBack;
        
        public FindMatchingSoSerialNumRequest()
        {
        }
        
        public FindMatchingSoSerialNumRequest(string RmaNum, string ItemNum, string SerialNo, bool SNMustMatch, int iMonthsBack)
        {
            this.RmaNum = RmaNum;
            this.ItemNum = ItemNum;
            this.SerialNo = SerialNo;
            this.SNMustMatch = SNMustMatch;
            this.iMonthsBack = iMonthsBack;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindMatchingSoSerialNumResponse", WrapperNamespace="http://10.0.0.33/ScanTestService/", IsWrapped=true)]
    public partial class FindMatchingSoSerialNumResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=0)]
        public bool FindMatchingSoSerialNumResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=1)]
        public string SoNumOut;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=2)]
        public string SoDateOut;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=3)]
        public bool UnderWarranty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://10.0.0.33/ScanTestService/", Order=4)]
        public string PossibleMatches;
        
        public FindMatchingSoSerialNumResponse()
        {
        }
        
        public FindMatchingSoSerialNumResponse(bool FindMatchingSoSerialNumResult, string SoNumOut, string SoDateOut, bool UnderWarranty, string PossibleMatches)
        {
            this.FindMatchingSoSerialNumResult = FindMatchingSoSerialNumResult;
            this.SoNumOut = SoNumOut;
            this.SoDateOut = SoDateOut;
            this.UnderWarranty = UnderWarranty;
            this.PossibleMatches = PossibleMatches;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ScannerWebServiceSoapChannel : MyWebService.ScannerWebServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ScannerWebServiceSoapClient : System.ServiceModel.ClientBase<MyWebService.ScannerWebServiceSoap>, MyWebService.ScannerWebServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ScannerWebServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ScannerWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ScannerWebServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScannerWebServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ScannerWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScannerWebServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ScannerWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScannerWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GenericQueryToList(string Query, string delimiter)
        {
            return base.Channel.GenericQueryToList(Query, delimiter);
        }
        
        public System.Threading.Tasks.Task<string> GenericQueryToListAsync(string Query, string delimiter)
        {
            return base.Channel.GenericQueryToListAsync(Query, delimiter);
        }
        
        public long DateDaysDiff(System.DateTime date1, System.DateTime date2)
        {
            return base.Channel.DateDaysDiff(date1, date2);
        }
        
        public System.Threading.Tasks.Task<long> DateDaysDiffAsync(System.DateTime date1, System.DateTime date2)
        {
            return base.Channel.DateDaysDiffAsync(date1, date2);
        }
        
        public System.DateTime CurrentTime()
        {
            return base.Channel.CurrentTime();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> CurrentTimeAsync()
        {
            return base.Channel.CurrentTimeAsync();
        }
        
        public string GetServerMode()
        {
            return base.Channel.GetServerMode();
        }
        
        public System.Threading.Tasks.Task<string> GetServerModeAsync()
        {
            return base.Channel.GetServerModeAsync();
        }
        
        public string GetServerURL()
        {
            return base.Channel.GetServerURL();
        }
        
        public System.Threading.Tasks.Task<string> GetServerURLAsync()
        {
            return base.Channel.GetServerURLAsync();
        }
        
        public string TestService()
        {
            return base.Channel.TestService();
        }
        
        public System.Threading.Tasks.Task<string> TestServiceAsync()
        {
            return base.Channel.TestServiceAsync();
        }
        
        public string UserGetNameFromID(int userID)
        {
            return base.Channel.UserGetNameFromID(userID);
        }
        
        public System.Threading.Tasks.Task<string> UserGetNameFromIDAsync(int userID)
        {
            return base.Channel.UserGetNameFromIDAsync(userID);
        }
        
        public int UserGetIDFromName(string userName)
        {
            return base.Channel.UserGetIDFromName(userName);
        }
        
        public System.Threading.Tasks.Task<int> UserGetIDFromNameAsync(string userName)
        {
            return base.Channel.UserGetIDFromNameAsync(userName);
        }
        
        public string UsersGetList()
        {
            return base.Channel.UsersGetList();
        }
        
        public System.Threading.Tasks.Task<string> UsersGetListAsync()
        {
            return base.Channel.UsersGetListAsync();
        }
        
        public string GetCustomPartListNames(string UserName)
        {
            return base.Channel.GetCustomPartListNames(UserName);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomPartListNamesAsync(string UserName)
        {
            return base.Channel.GetCustomPartListNamesAsync(UserName);
        }
        
        public string GetCustomPartList(string UserName, string PartListName)
        {
            return base.Channel.GetCustomPartList(UserName, PartListName);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomPartListAsync(string UserName, string PartListName)
        {
            return base.Channel.GetCustomPartListAsync(UserName, PartListName);
        }
        
        public string AddCustomPartList(string UserName, string PartListName, string PartList)
        {
            return base.Channel.AddCustomPartList(UserName, PartListName, PartList);
        }
        
        public System.Threading.Tasks.Task<string> AddCustomPartListAsync(string UserName, string PartListName, string PartList)
        {
            return base.Channel.AddCustomPartListAsync(UserName, PartListName, PartList);
        }
        
        public string DeleteCustomPartList(string UserName, string PartListName)
        {
            return base.Channel.DeleteCustomPartList(UserName, PartListName);
        }
        
        public System.Threading.Tasks.Task<string> DeleteCustomPartListAsync(string UserName, string PartListName)
        {
            return base.Channel.DeleteCustomPartListAsync(UserName, PartListName);
        }
        
        public string GetOneFieldDataFromTable(string TableName, string WhatField, string Condition)
        {
            return base.Channel.GetOneFieldDataFromTable(TableName, WhatField, Condition);
        }
        
        public System.Threading.Tasks.Task<string> GetOneFieldDataFromTableAsync(string TableName, string WhatField, string Condition)
        {
            return base.Channel.GetOneFieldDataFromTableAsync(TableName, WhatField, Condition);
        }
        
        public string AddTestLabScan(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string Status, string TestResult, string ResultNotes, string HECI, int scanHistID)
        {
            return base.Channel.AddTestLabScan(DeviceID, PartNum, SerialNumbers, UserName, OrderType, OrderNum, Status, TestResult, ResultNotes, HECI, scanHistID);
        }
        
        public System.Threading.Tasks.Task<string> AddTestLabScanAsync(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string Status, string TestResult, string ResultNotes, string HECI, int scanHistID)
        {
            return base.Channel.AddTestLabScanAsync(DeviceID, PartNum, SerialNumbers, UserName, OrderType, OrderNum, Status, TestResult, ResultNotes, HECI, scanHistID);
        }
        
        public string AddTestablePart(string PartNo, string UserName)
        {
            return base.Channel.AddTestablePart(PartNo, UserName);
        }
        
        public System.Threading.Tasks.Task<string> AddTestablePartAsync(string PartNo, string UserName)
        {
            return base.Channel.AddTestablePartAsync(PartNo, UserName);
        }
        
        public System.Data.DataSet GetTestPartInfoByID(int ID)
        {
            return base.Channel.GetTestPartInfoByID(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestPartInfoByIDAsync(int ID)
        {
            return base.Channel.GetTestPartInfoByIDAsync(ID);
        }
        
        public System.Data.DataSet GetTestPartInfoByPartNo(string partNum)
        {
            return base.Channel.GetTestPartInfoByPartNo(partNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestPartInfoByPartNoAsync(string partNum)
        {
            return base.Channel.GetTestPartInfoByPartNoAsync(partNum);
        }
        
        public System.Data.DataSet GetTestPartInfoBySn(string SerialNum)
        {
            return base.Channel.GetTestPartInfoBySn(SerialNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestPartInfoBySnAsync(string SerialNum)
        {
            return base.Channel.GetTestPartInfoBySnAsync(SerialNum);
        }
        
        public string GetPartNumberBySn(string SerialNum, string whatField)
        {
            return base.Channel.GetPartNumberBySn(SerialNum, whatField);
        }
        
        public System.Threading.Tasks.Task<string> GetPartNumberBySnAsync(string SerialNum, string whatField)
        {
            return base.Channel.GetPartNumberBySnAsync(SerialNum, whatField);
        }
        
        public string CheckIfTested(string SerialNum, string PartNum)
        {
            return base.Channel.CheckIfTested(SerialNum, PartNum);
        }
        
        public System.Threading.Tasks.Task<string> CheckIfTestedAsync(string SerialNum, string PartNum)
        {
            return base.Channel.CheckIfTestedAsync(SerialNum, PartNum);
        }
        
        public bool TestLabPartExists(string PartNum)
        {
            return base.Channel.TestLabPartExists(PartNum);
        }
        
        public System.Threading.Tasks.Task<bool> TestLabPartExistsAsync(string PartNum)
        {
            return base.Channel.TestLabPartExistsAsync(PartNum);
        }
        
        public string GetTestResultBySn(string SerialNumber)
        {
            return base.Channel.GetTestResultBySn(SerialNumber);
        }
        
        public System.Threading.Tasks.Task<string> GetTestResultBySnAsync(string SerialNumber)
        {
            return base.Channel.GetTestResultBySnAsync(SerialNumber);
        }
        
        public string GetTestFieldDataBySerialNo(string SerialNumber, string WhatField)
        {
            return base.Channel.GetTestFieldDataBySerialNo(SerialNumber, WhatField);
        }
        
        public System.Threading.Tasks.Task<string> GetTestFieldDataBySerialNoAsync(string SerialNumber, string WhatField)
        {
            return base.Channel.GetTestFieldDataBySerialNoAsync(SerialNumber, WhatField);
        }
        
        public string GetTestResultNotesByID(int rID)
        {
            return base.Channel.GetTestResultNotesByID(rID);
        }
        
        public System.Threading.Tasks.Task<string> GetTestResultNotesByIDAsync(int rID)
        {
            return base.Channel.GetTestResultNotesByIDAsync(rID);
        }
        
        public string TestPoGetOpenList()
        {
            return base.Channel.TestPoGetOpenList();
        }
        
        public System.Threading.Tasks.Task<string> TestPoGetOpenListAsync()
        {
            return base.Channel.TestPoGetOpenListAsync();
        }
        
        public string TestRmaGetOpenList()
        {
            return base.Channel.TestRmaGetOpenList();
        }
        
        public System.Threading.Tasks.Task<string> TestRmaGetOpenListAsync()
        {
            return base.Channel.TestRmaGetOpenListAsync();
        }
        
        public string Skp_POSkidNewNumber(string UserName)
        {
            return base.Channel.Skp_POSkidNewNumber(UserName);
        }
        
        public System.Threading.Tasks.Task<string> Skp_POSkidNewNumberAsync(string UserName)
        {
            return base.Channel.Skp_POSkidNewNumberAsync(UserName);
        }
        
        public string Skp_POSkidGetFieldData(string SkidNo, string FieldName)
        {
            return base.Channel.Skp_POSkidGetFieldData(SkidNo, FieldName);
        }
        
        public System.Threading.Tasks.Task<string> Skp_POSkidGetFieldDataAsync(string SkidNo, string FieldName)
        {
            return base.Channel.Skp_POSkidGetFieldDataAsync(SkidNo, FieldName);
        }
        
        public bool Skp_POSkidUpdateField(string SkidNo, string FieldName, string FieldData)
        {
            return base.Channel.Skp_POSkidUpdateField(SkidNo, FieldName, FieldData);
        }
        
        public System.Threading.Tasks.Task<bool> Skp_POSkidUpdateFieldAsync(string SkidNo, string FieldName, string FieldData)
        {
            return base.Channel.Skp_POSkidUpdateFieldAsync(SkidNo, FieldName, FieldData);
        }
        
        public void Skp_PrintSkidSheet(string SkidNo, string OtherData)
        {
            base.Channel.Skp_PrintSkidSheet(SkidNo, OtherData);
        }
        
        public System.Threading.Tasks.Task Skp_PrintSkidSheetAsync(string SkidNo, string OtherData)
        {
            return base.Channel.Skp_PrintSkidSheetAsync(SkidNo, OtherData);
        }
        
        public string Skp_BuildPartStatusView(string UserName)
        {
            return base.Channel.Skp_BuildPartStatusView(UserName);
        }
        
        public System.Threading.Tasks.Task<string> Skp_BuildPartStatusViewAsync(string UserName)
        {
            return base.Channel.Skp_BuildPartStatusViewAsync(UserName);
        }
        
        public string Skp_PartStatusInfo(string UserName, string partNo, string WhatField)
        {
            return base.Channel.Skp_PartStatusInfo(UserName, partNo, WhatField);
        }
        
        public System.Threading.Tasks.Task<string> Skp_PartStatusInfoAsync(string UserName, string partNo, string WhatField)
        {
            return base.Channel.Skp_PartStatusInfoAsync(UserName, partNo, WhatField);
        }
        
        public string Skp_SkidCheckDupeSN(string SkidNo, string SerialNo)
        {
            return base.Channel.Skp_SkidCheckDupeSN(SkidNo, SerialNo);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidCheckDupeSNAsync(string SkidNo, string SerialNo)
        {
            return base.Channel.Skp_SkidCheckDupeSNAsync(SkidNo, SerialNo);
        }
        
        public string Skp_SkidNewNumber(string UserName)
        {
            return base.Channel.Skp_SkidNewNumber(UserName);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidNewNumberAsync(string UserName)
        {
            return base.Channel.Skp_SkidNewNumberAsync(UserName);
        }
        
        public bool Skp_PartApproved(string PartNo)
        {
            return base.Channel.Skp_PartApproved(PartNo);
        }
        
        public System.Threading.Tasks.Task<bool> Skp_PartApprovedAsync(string PartNo)
        {
            return base.Channel.Skp_PartApprovedAsync(PartNo);
        }
        
        public bool Skp_CanProcessPart(string PartNo, int Qty)
        {
            return base.Channel.Skp_CanProcessPart(PartNo, Qty);
        }
        
        public System.Threading.Tasks.Task<bool> Skp_CanProcessPartAsync(string PartNo, int Qty)
        {
            return base.Channel.Skp_CanProcessPartAsync(PartNo, Qty);
        }
        
        public int Skp_SkidItemAdd(int ParentID, int isContainer, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode)
        {
            return base.Channel.Skp_SkidItemAdd(ParentID, isContainer, SkidNo, UserName, PartNo, Qty, SerialNo, HeciCode);
        }
        
        public System.Threading.Tasks.Task<int> Skp_SkidItemAddAsync(int ParentID, int isContainer, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode)
        {
            return base.Channel.Skp_SkidItemAddAsync(ParentID, isContainer, SkidNo, UserName, PartNo, Qty, SerialNo, HeciCode);
        }
        
        public int Skp_SkidItemRemove(int ParentID, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode)
        {
            return base.Channel.Skp_SkidItemRemove(ParentID, SkidNo, UserName, PartNo, Qty, SerialNo, HeciCode);
        }
        
        public System.Threading.Tasks.Task<int> Skp_SkidItemRemoveAsync(int ParentID, string SkidNo, string UserName, string PartNo, int Qty, string SerialNo, string HeciCode)
        {
            return base.Channel.Skp_SkidItemRemoveAsync(ParentID, SkidNo, UserName, PartNo, Qty, SerialNo, HeciCode);
        }
        
        public int Skp_SkidDeleteItem(int skidRowID)
        {
            return base.Channel.Skp_SkidDeleteItem(skidRowID);
        }
        
        public System.Threading.Tasks.Task<int> Skp_SkidDeleteItemAsync(int skidRowID)
        {
            return base.Channel.Skp_SkidDeleteItemAsync(skidRowID);
        }
        
        public int Skp_SkidItemCount(string SkidNo)
        {
            return base.Channel.Skp_SkidItemCount(SkidNo);
        }
        
        public System.Threading.Tasks.Task<int> Skp_SkidItemCountAsync(string SkidNo)
        {
            return base.Channel.Skp_SkidItemCountAsync(SkidNo);
        }
        
        public int Skp_SkidItemQty(string SkidNo)
        {
            return base.Channel.Skp_SkidItemQty(SkidNo);
        }
        
        public System.Threading.Tasks.Task<int> Skp_SkidItemQtyAsync(string SkidNo)
        {
            return base.Channel.Skp_SkidItemQtyAsync(SkidNo);
        }
        
        public string Skp_SkidSetAsComplete(string SkidNo)
        {
            return base.Channel.Skp_SkidSetAsComplete(SkidNo);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidSetAsCompleteAsync(string SkidNo)
        {
            return base.Channel.Skp_SkidSetAsCompleteAsync(SkidNo);
        }
        
        public string Skp_SkidSetAsShipped(string SkidNo, string UserName, string VendorName, string SalesOrderNo)
        {
            return base.Channel.Skp_SkidSetAsShipped(SkidNo, UserName, VendorName, SalesOrderNo);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidSetAsShippedAsync(string SkidNo, string UserName, string VendorName, string SalesOrderNo)
        {
            return base.Channel.Skp_SkidSetAsShippedAsync(SkidNo, UserName, VendorName, SalesOrderNo);
        }
        
        public string Skp_SkidListGetAll()
        {
            return base.Channel.Skp_SkidListGetAll();
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidListGetAllAsync()
        {
            return base.Channel.Skp_SkidListGetAllAsync();
        }
        
        public string Skp_SkidListGetAfterDate(System.DateTime TheCutOffDate)
        {
            return base.Channel.Skp_SkidListGetAfterDate(TheCutOffDate);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidListGetAfterDateAsync(System.DateTime TheCutOffDate)
        {
            return base.Channel.Skp_SkidListGetAfterDateAsync(TheCutOffDate);
        }
        
        public string Skp_SkidGetSkidTypes()
        {
            return base.Channel.Skp_SkidGetSkidTypes();
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidGetSkidTypesAsync()
        {
            return base.Channel.Skp_SkidGetSkidTypesAsync();
        }
        
        public string Skp_SkidGetMetalPartTypes()
        {
            return base.Channel.Skp_SkidGetMetalPartTypes();
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidGetMetalPartTypesAsync()
        {
            return base.Channel.Skp_SkidGetMetalPartTypesAsync();
        }
        
        public string Skp_SkidGetCarrierList()
        {
            return base.Channel.Skp_SkidGetCarrierList();
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidGetCarrierListAsync()
        {
            return base.Channel.Skp_SkidGetCarrierListAsync();
        }
        
        public string Skp_SkidGetLocationList()
        {
            return base.Channel.Skp_SkidGetLocationList();
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidGetLocationListAsync()
        {
            return base.Channel.Skp_SkidGetLocationListAsync();
        }
        
        public string Skp_SkidGetPartNumbers(string SkidNo)
        {
            return base.Channel.Skp_SkidGetPartNumbers(SkidNo);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidGetPartNumbersAsync(string SkidNo)
        {
            return base.Channel.Skp_SkidGetPartNumbersAsync(SkidNo);
        }
        
        public string Skp_GetSkidNoBySerialNumber(string SerialNo)
        {
            return base.Channel.Skp_GetSkidNoBySerialNumber(SerialNo);
        }
        
        public System.Threading.Tasks.Task<string> Skp_GetSkidNoBySerialNumberAsync(string SerialNo)
        {
            return base.Channel.Skp_GetSkidNoBySerialNumberAsync(SerialNo);
        }
        
        public System.Data.DataSet Skp_SkidGetInfo(string SkidNo)
        {
            return base.Channel.Skp_SkidGetInfo(SkidNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Skp_SkidGetInfoAsync(string SkidNo)
        {
            return base.Channel.Skp_SkidGetInfoAsync(SkidNo);
        }
        
        public string Skp_SkidGetFieldData(string SkidNo, string WhatField)
        {
            return base.Channel.Skp_SkidGetFieldData(SkidNo, WhatField);
        }
        
        public System.Threading.Tasks.Task<string> Skp_SkidGetFieldDataAsync(string SkidNo, string WhatField)
        {
            return base.Channel.Skp_SkidGetFieldDataAsync(SkidNo, WhatField);
        }
        
        public bool Skp_SkidUpdateField(string SkidNo, string FieldName, string FieldData)
        {
            return base.Channel.Skp_SkidUpdateField(SkidNo, FieldName, FieldData);
        }
        
        public System.Threading.Tasks.Task<bool> Skp_SkidUpdateFieldAsync(string SkidNo, string FieldName, string FieldData)
        {
            return base.Channel.Skp_SkidUpdateFieldAsync(SkidNo, FieldName, FieldData);
        }
        
        public bool Skp_SkidUpdateNote(string UserName, string TableRef, string RecordRefID, string noteStr)
        {
            return base.Channel.Skp_SkidUpdateNote(UserName, TableRef, RecordRefID, noteStr);
        }
        
        public System.Threading.Tasks.Task<bool> Skp_SkidUpdateNoteAsync(string UserName, string TableRef, string RecordRefID, string noteStr)
        {
            return base.Channel.Skp_SkidUpdateNoteAsync(UserName, TableRef, RecordRefID, noteStr);
        }
        
        public string SoGetOpenList()
        {
            return base.Channel.SoGetOpenList();
        }
        
        public System.Threading.Tasks.Task<string> SoGetOpenListAsync()
        {
            return base.Channel.SoGetOpenListAsync();
        }
        
        public System.Data.DataSet SoGetInfo(string SoNum)
        {
            return base.Channel.SoGetInfo(SoNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SoGetInfoAsync(string SoNum)
        {
            return base.Channel.SoGetInfoAsync(SoNum);
        }
        
        public string SoGetItemNumbers(string SoNum)
        {
            return base.Channel.SoGetItemNumbers(SoNum);
        }
        
        public System.Threading.Tasks.Task<string> SoGetItemNumbersAsync(string SoNum)
        {
            return base.Channel.SoGetItemNumbersAsync(SoNum);
        }
        
        public System.Data.DataSet SoGetInfoByPartNum(string ItemNum)
        {
            return base.Channel.SoGetInfoByPartNum(ItemNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SoGetInfoByPartNumAsync(string ItemNum)
        {
            return base.Channel.SoGetInfoByPartNumAsync(ItemNum);
        }
        
        public string SoGetItemDescription(string OrderNum, string ItemNum)
        {
            return base.Channel.SoGetItemDescription(OrderNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<string> SoGetItemDescriptionAsync(string OrderNum, string ItemNum)
        {
            return base.Channel.SoGetItemDescriptionAsync(OrderNum, ItemNum);
        }
        
        public bool SoExcludingPartIsSoComplete(string SoNum, string ItemNum, string curPoNum)
        {
            return base.Channel.SoExcludingPartIsSoComplete(SoNum, ItemNum, curPoNum);
        }
        
        public System.Threading.Tasks.Task<bool> SoExcludingPartIsSoCompleteAsync(string SoNum, string ItemNum, string curPoNum)
        {
            return base.Channel.SoExcludingPartIsSoCompleteAsync(SoNum, ItemNum, curPoNum);
        }
        
        public string RtvGetOpenList()
        {
            return base.Channel.RtvGetOpenList();
        }
        
        public System.Threading.Tasks.Task<string> RtvGetOpenListAsync()
        {
            return base.Channel.RtvGetOpenListAsync();
        }
        
        public System.Data.DataSet RtvGetInfo(string RtvID)
        {
            return base.Channel.RtvGetInfo(RtvID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RtvGetInfoAsync(string RtvID)
        {
            return base.Channel.RtvGetInfoAsync(RtvID);
        }
        
        public string RtvGetItemNumbers(string RtvID)
        {
            return base.Channel.RtvGetItemNumbers(RtvID);
        }
        
        public System.Threading.Tasks.Task<string> RtvGetItemNumbersAsync(string RtvID)
        {
            return base.Channel.RtvGetItemNumbersAsync(RtvID);
        }
        
        public System.Data.DataSet RtvGetInfoByPartNum(string ItemNum)
        {
            return base.Channel.RtvGetInfoByPartNum(ItemNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RtvGetInfoByPartNumAsync(string ItemNum)
        {
            return base.Channel.RtvGetInfoByPartNumAsync(ItemNum);
        }
        
        public string PoGetOpenList()
        {
            return base.Channel.PoGetOpenList();
        }
        
        public System.Threading.Tasks.Task<string> PoGetOpenListAsync()
        {
            return base.Channel.PoGetOpenListAsync();
        }
        
        public System.Data.DataSet PoGetInfo(string PoNum)
        {
            return base.Channel.PoGetInfo(PoNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PoGetInfoAsync(string PoNum)
        {
            return base.Channel.PoGetInfoAsync(PoNum);
        }
        
        public string PoGetItemNumbers(string PoNum)
        {
            return base.Channel.PoGetItemNumbers(PoNum);
        }
        
        public System.Threading.Tasks.Task<string> PoGetItemNumbersAsync(string PoNum)
        {
            return base.Channel.PoGetItemNumbersAsync(PoNum);
        }
        
        public string PoGetAllItemNumbers(string PoNum)
        {
            return base.Channel.PoGetAllItemNumbers(PoNum);
        }
        
        public System.Threading.Tasks.Task<string> PoGetAllItemNumbersAsync(string PoNum)
        {
            return base.Channel.PoGetAllItemNumbersAsync(PoNum);
        }
        
        public System.Data.DataSet PoGetInfoByPartNum(string ItemNum)
        {
            return base.Channel.PoGetInfoByPartNum(ItemNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PoGetInfoByPartNumAsync(string ItemNum)
        {
            return base.Channel.PoGetInfoByPartNumAsync(ItemNum);
        }
        
        public string PoGetItemDescription(string OrderNum, string ItemNum)
        {
            return base.Channel.PoGetItemDescription(OrderNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<string> PoGetItemDescriptionAsync(string OrderNum, string ItemNum)
        {
            return base.Channel.PoGetItemDescriptionAsync(OrderNum, ItemNum);
        }
        
        public string OpenSoReportBuildEmailString(string EmailStr, string PoNum, string ItemNum)
        {
            return base.Channel.OpenSoReportBuildEmailString(EmailStr, PoNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<string> OpenSoReportBuildEmailStringAsync(string EmailStr, string PoNum, string ItemNum)
        {
            return base.Channel.OpenSoReportBuildEmailStringAsync(EmailStr, PoNum, ItemNum);
        }
        
        public string RmaGetOpenList()
        {
            return base.Channel.RmaGetOpenList();
        }
        
        public System.Threading.Tasks.Task<string> RmaGetOpenListAsync()
        {
            return base.Channel.RmaGetOpenListAsync();
        }
        
        public System.Data.DataSet RmaGetInfo(string RmaNum)
        {
            return base.Channel.RmaGetInfo(RmaNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RmaGetInfoAsync(string RmaNum)
        {
            return base.Channel.RmaGetInfoAsync(RmaNum);
        }
        
        public string RmaGetItemNumbers(string RmaNum)
        {
            return base.Channel.RmaGetItemNumbers(RmaNum);
        }
        
        public System.Threading.Tasks.Task<string> RmaGetItemNumbersAsync(string RmaNum)
        {
            return base.Channel.RmaGetItemNumbersAsync(RmaNum);
        }
        
        public System.Data.DataSet RmaGetInfoByPartNum(string ItemNum)
        {
            return base.Channel.RmaGetInfoByPartNum(ItemNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RmaGetInfoByPartNumAsync(string ItemNum)
        {
            return base.Channel.RmaGetInfoByPartNumAsync(ItemNum);
        }
        
        public string RmaHistorySearch(string sSerialNum)
        {
            return base.Channel.RmaHistorySearch(sSerialNum);
        }
        
        public System.Threading.Tasks.Task<string> RmaHistorySearchAsync(string sSerialNum)
        {
            return base.Channel.RmaHistorySearchAsync(sSerialNum);
        }
        
        public string RmaSearchUnapproved(string sSerialNum)
        {
            return base.Channel.RmaSearchUnapproved(sSerialNum);
        }
        
        public System.Threading.Tasks.Task<string> RmaSearchUnapprovedAsync(string sSerialNum)
        {
            return base.Channel.RmaSearchUnapprovedAsync(sSerialNum);
        }
        
        public string RmaGetReturnInfo(string sScanUser, string RmaNum, string ItemNum, string sSerialNum, string HeciCode)
        {
            return base.Channel.RmaGetReturnInfo(sScanUser, RmaNum, ItemNum, sSerialNum, HeciCode);
        }
        
        public System.Threading.Tasks.Task<string> RmaGetReturnInfoAsync(string sScanUser, string RmaNum, string ItemNum, string sSerialNum, string HeciCode)
        {
            return base.Channel.RmaGetReturnInfoAsync(sScanUser, RmaNum, ItemNum, sSerialNum, HeciCode);
        }
        
        public string VerifySerialNumber(string SerialNum, string Direction)
        {
            return base.Channel.VerifySerialNumber(SerialNum, Direction);
        }
        
        public System.Threading.Tasks.Task<string> VerifySerialNumberAsync(string SerialNum, string Direction)
        {
            return base.Channel.VerifySerialNumberAsync(SerialNum, Direction);
        }
        
        public string VerifySerialNumber_V2(string SerialNum, string OrderType, string OrderNum)
        {
            return base.Channel.VerifySerialNumber_V2(SerialNum, OrderType, OrderNum);
        }
        
        public System.Threading.Tasks.Task<string> VerifySerialNumber_V2Async(string SerialNum, string OrderType, string OrderNum)
        {
            return base.Channel.VerifySerialNumber_V2Async(SerialNum, OrderType, OrderNum);
        }
        
        public System.Data.DataSet GetPartInfoBySerialNumber(string SerialNum)
        {
            return base.Channel.GetPartInfoBySerialNumber(SerialNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPartInfoBySerialNumberAsync(string SerialNum)
        {
            return base.Channel.GetPartInfoBySerialNumberAsync(SerialNum);
        }
        
        public string GetScanHistoryFieldData(string SerialNo, string WhatField)
        {
            return base.Channel.GetScanHistoryFieldData(SerialNo, WhatField);
        }
        
        public System.Threading.Tasks.Task<string> GetScanHistoryFieldDataAsync(string SerialNo, string WhatField)
        {
            return base.Channel.GetScanHistoryFieldDataAsync(SerialNo, WhatField);
        }
        
        public bool CompleteOrder(string OrderType, string OrderNum)
        {
            return base.Channel.CompleteOrder(OrderType, OrderNum);
        }
        
        public System.Threading.Tasks.Task<bool> CompleteOrderAsync(string OrderType, string OrderNum)
        {
            return base.Channel.CompleteOrderAsync(OrderType, OrderNum);
        }
        
        public string AddNewPartScan(string DeviceID, string PartNum, string SerialNumbers, string UserName, string SONum, string PONum, string RmaNo, string HECI, string MNSCompany)
        {
            return base.Channel.AddNewPartScan(DeviceID, PartNum, SerialNumbers, UserName, SONum, PONum, RmaNo, HECI, MNSCompany);
        }
        
        public System.Threading.Tasks.Task<string> AddNewPartScanAsync(string DeviceID, string PartNum, string SerialNumbers, string UserName, string SONum, string PONum, string RmaNo, string HECI, string MNSCompany)
        {
            return base.Channel.AddNewPartScanAsync(DeviceID, PartNum, SerialNumbers, UserName, SONum, PONum, RmaNo, HECI, MNSCompany);
        }
        
        public string AddNewPartScan_V2(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string HECI, string MNSCompany)
        {
            return base.Channel.AddNewPartScan_V2(DeviceID, PartNum, SerialNumbers, UserName, OrderType, OrderNum, HECI, MNSCompany);
        }
        
        public System.Threading.Tasks.Task<string> AddNewPartScan_V2Async(string DeviceID, string PartNum, string SerialNumbers, string UserName, string OrderType, string OrderNum, string HECI, string MNSCompany)
        {
            return base.Channel.AddNewPartScan_V2Async(DeviceID, PartNum, SerialNumbers, UserName, OrderType, OrderNum, HECI, MNSCompany);
        }
        
        public string AddDirtDevilAdjustment(string DeviceID, string OrderType, string OrderNum, string ItemNum, string QtyAdjust, string adjReasonOverRide, string ScanUserName)
        {
            return base.Channel.AddDirtDevilAdjustment(DeviceID, OrderType, OrderNum, ItemNum, QtyAdjust, adjReasonOverRide, ScanUserName);
        }
        
        public System.Threading.Tasks.Task<string> AddDirtDevilAdjustmentAsync(string DeviceID, string OrderType, string OrderNum, string ItemNum, string QtyAdjust, string adjReasonOverRide, string ScanUserName)
        {
            return base.Channel.AddDirtDevilAdjustmentAsync(DeviceID, OrderType, OrderNum, ItemNum, QtyAdjust, adjReasonOverRide, ScanUserName);
        }
        
        public string DeletePartScan(string PartScanID, string DdAdjustmentID)
        {
            return base.Channel.DeletePartScan(PartScanID, DdAdjustmentID);
        }
        
        public System.Threading.Tasks.Task<string> DeletePartScanAsync(string PartScanID, string DdAdjustmentID)
        {
            return base.Channel.DeletePartScanAsync(PartScanID, DdAdjustmentID);
        }
        
        public string ExecProcedure(string sSp, string returnDefaultValue)
        {
            return base.Channel.ExecProcedure(sSp, returnDefaultValue);
        }
        
        public System.Threading.Tasks.Task<string> ExecProcedureAsync(string sSp, string returnDefaultValue)
        {
            return base.Channel.ExecProcedureAsync(sSp, returnDefaultValue);
        }
        
        public string GetAltPartNumber(string PartNumber)
        {
            return base.Channel.GetAltPartNumber(PartNumber);
        }
        
        public System.Threading.Tasks.Task<string> GetAltPartNumberAsync(string PartNumber)
        {
            return base.Channel.GetAltPartNumberAsync(PartNumber);
        }
        
        public string TestFindSoNumBySerialNum(string RmaNum, string ItemNum, string SerialNo)
        {
            return base.Channel.TestFindSoNumBySerialNum(RmaNum, ItemNum, SerialNo);
        }
        
        public System.Threading.Tasks.Task<string> TestFindSoNumBySerialNumAsync(string RmaNum, string ItemNum, string SerialNo)
        {
            return base.Channel.TestFindSoNumBySerialNumAsync(RmaNum, ItemNum, SerialNo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MyWebService.FindSoNumFromPartSerialNumResponse MyWebService.ScannerWebServiceSoap.FindSoNumFromPartSerialNum(MyWebService.FindSoNumFromPartSerialNumRequest request)
        {
            return base.Channel.FindSoNumFromPartSerialNum(request);
        }
        
        public bool FindSoNumFromPartSerialNum(string RmaNum, string ItemNum, string SerialNo, out string SoNumOut, out string InvDateOut, out bool UnderWarranty)
        {
            MyWebService.FindSoNumFromPartSerialNumRequest inValue = new MyWebService.FindSoNumFromPartSerialNumRequest();
            inValue.RmaNum = RmaNum;
            inValue.ItemNum = ItemNum;
            inValue.SerialNo = SerialNo;
            MyWebService.FindSoNumFromPartSerialNumResponse retVal = ((MyWebService.ScannerWebServiceSoap)(this)).FindSoNumFromPartSerialNum(inValue);
            SoNumOut = retVal.SoNumOut;
            InvDateOut = retVal.InvDateOut;
            UnderWarranty = retVal.UnderWarranty;
            return retVal.FindSoNumFromPartSerialNumResult;
        }
        
        public System.Threading.Tasks.Task<MyWebService.FindSoNumFromPartSerialNumResponse> FindSoNumFromPartSerialNumAsync(MyWebService.FindSoNumFromPartSerialNumRequest request)
        {
            return base.Channel.FindSoNumFromPartSerialNumAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MyWebService.FindMatchingSoSerialNumResponse MyWebService.ScannerWebServiceSoap.FindMatchingSoSerialNum(MyWebService.FindMatchingSoSerialNumRequest request)
        {
            return base.Channel.FindMatchingSoSerialNum(request);
        }
        
        public bool FindMatchingSoSerialNum(string RmaNum, string ItemNum, string SerialNo, bool SNMustMatch, int iMonthsBack, out string SoNumOut, out string SoDateOut, out bool UnderWarranty, out string PossibleMatches)
        {
            MyWebService.FindMatchingSoSerialNumRequest inValue = new MyWebService.FindMatchingSoSerialNumRequest();
            inValue.RmaNum = RmaNum;
            inValue.ItemNum = ItemNum;
            inValue.SerialNo = SerialNo;
            inValue.SNMustMatch = SNMustMatch;
            inValue.iMonthsBack = iMonthsBack;
            MyWebService.FindMatchingSoSerialNumResponse retVal = ((MyWebService.ScannerWebServiceSoap)(this)).FindMatchingSoSerialNum(inValue);
            SoNumOut = retVal.SoNumOut;
            SoDateOut = retVal.SoDateOut;
            UnderWarranty = retVal.UnderWarranty;
            PossibleMatches = retVal.PossibleMatches;
            return retVal.FindMatchingSoSerialNumResult;
        }
        
        public System.Threading.Tasks.Task<MyWebService.FindMatchingSoSerialNumResponse> FindMatchingSoSerialNumAsync(MyWebService.FindMatchingSoSerialNumRequest request)
        {
            return base.Channel.FindMatchingSoSerialNumAsync(request);
        }
        
        public System.Data.DataSet FindSalesOrderNumbersForRmaItem(string RmaNum, string ItemNum)
        {
            return base.Channel.FindSalesOrderNumbersForRmaItem(RmaNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FindSalesOrderNumbersForRmaItemAsync(string RmaNum, string ItemNum)
        {
            return base.Channel.FindSalesOrderNumbersForRmaItemAsync(RmaNum, ItemNum);
        }
        
        public string GetEventInfoBySoNumber(string SoNum, string WhatField)
        {
            return base.Channel.GetEventInfoBySoNumber(SoNum, WhatField);
        }
        
        public System.Threading.Tasks.Task<string> GetEventInfoBySoNumberAsync(string SoNum, string WhatField)
        {
            return base.Channel.GetEventInfoBySoNumberAsync(SoNum, WhatField);
        }
        
        public System.Data.DataSet AnyOrderWithPartNumber(string PartNum)
        {
            return base.Channel.AnyOrderWithPartNumber(PartNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AnyOrderWithPartNumberAsync(string PartNum)
        {
            return base.Channel.AnyOrderWithPartNumberAsync(PartNum);
        }
        
        public int ScanTestCount(string OrderType, string OrderNo, string PartNo, string Status, string TestResult)
        {
            return base.Channel.ScanTestCount(OrderType, OrderNo, PartNo, Status, TestResult);
        }
        
        public System.Threading.Tasks.Task<int> ScanTestCountAsync(string OrderType, string OrderNo, string PartNo, string Status, string TestResult)
        {
            return base.Channel.ScanTestCountAsync(OrderType, OrderNo, PartNo, Status, TestResult);
        }
        
        public int ScannedTodayCount(string PartNum, string OrderType, string OrderNum)
        {
            return base.Channel.ScannedTodayCount(PartNum, OrderType, OrderNum);
        }
        
        public System.Threading.Tasks.Task<int> ScannedTodayCountAsync(string PartNum, string OrderType, string OrderNum)
        {
            return base.Channel.ScannedTodayCountAsync(PartNum, OrderType, OrderNum);
        }
        
        public int GetLeftToShip(string SoNum, string ItemNum)
        {
            return base.Channel.GetLeftToShip(SoNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<int> GetLeftToShipAsync(string SoNum, string ItemNum)
        {
            return base.Channel.GetLeftToShipAsync(SoNum, ItemNum);
        }
        
        public int GetQtyOrdered(string OrderType, string OrderNum, string ItemNum)
        {
            return base.Channel.GetQtyOrdered(OrderType, OrderNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<int> GetQtyOrderedAsync(string OrderType, string OrderNum, string ItemNum)
        {
            return base.Channel.GetQtyOrderedAsync(OrderType, OrderNum, ItemNum);
        }
        
        public int GetQtyReceived(string PoNum, string ItemNum)
        {
            return base.Channel.GetQtyReceived(PoNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<int> GetQtyReceivedAsync(string PoNum, string ItemNum)
        {
            return base.Channel.GetQtyReceivedAsync(PoNum, ItemNum);
        }
        
        public string ToShipOrStock(string PoNum, string ItemNum)
        {
            return base.Channel.ToShipOrStock(PoNum, ItemNum);
        }
        
        public System.Threading.Tasks.Task<string> ToShipOrStockAsync(string PoNum, string ItemNum)
        {
            return base.Channel.ToShipOrStockAsync(PoNum, ItemNum);
        }
        
        public string GetWarrantyInfo(string SerialNum, string whatField)
        {
            return base.Channel.GetWarrantyInfo(SerialNum, whatField);
        }
        
        public System.Threading.Tasks.Task<string> GetWarrantyInfoAsync(string SerialNum, string whatField)
        {
            return base.Channel.GetWarrantyInfoAsync(SerialNum, whatField);
        }
        
        public bool IsUnderWarranty(string SerialNum)
        {
            return base.Channel.IsUnderWarranty(SerialNum);
        }
        
        public System.Threading.Tasks.Task<bool> IsUnderWarrantyAsync(string SerialNum)
        {
            return base.Channel.IsUnderWarrantyAsync(SerialNum);
        }
        
        public string SendDupeSnPoEmail(string PartNum, string SerialNum, string HeciCode, string UserName, string OrderNum, string DupePoNum)
        {
            return base.Channel.SendDupeSnPoEmail(PartNum, SerialNum, HeciCode, UserName, OrderNum, DupePoNum);
        }
        
        public System.Threading.Tasks.Task<string> SendDupeSnPoEmailAsync(string PartNum, string SerialNum, string HeciCode, string UserName, string OrderNum, string DupePoNum)
        {
            return base.Channel.SendDupeSnPoEmailAsync(PartNum, SerialNum, HeciCode, UserName, OrderNum, DupePoNum);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ScannerWebServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ScannerWebServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ScannerWebServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.0.33/ScanProdService/service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ScannerWebServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.0.33/ScanTestService/service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ScannerWebServiceSoap,
            
            ScannerWebServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.1.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
